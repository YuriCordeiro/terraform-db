# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ## AWS Variables
      aws_access_key_id: $ {{vars.AWS_ACCESS_KEY_ID}}
      aws_secret_access_key: $ {{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_region: ${{ vars.AWS_REGION }}
      vpc_id: ${{ vars.VPC_ID }}
      route_table_id: ${{ vars.ROUTE_TABLE_ID }}
      subnetA: ${{ vars.SUBNETA }}
      subnetB: ${{ vars.SUBNETB }}
      subnetC: ${{ vars.SUBNETC }}
      ## Atlas MongoDB Variables
      mongodbatlas_public_key: ${{ vars.MONGODBATLAS_PUBLIC_KEY }}
      mongodbatlas_private_key: ${{ secrets.MONGODBATLAS_PRIVATE_KEY }}
      atlas_org_id: ${{ vars.ATLAS_ORG_ID }}
      atlas_project_name: ${{ vars.ATLAS_PROJECT_NAME }}
      environment: ${{ vars.ENVIRONMENT }}
      cluster_instance_size_name: ${{ vars.CLUSTER_INSTANCE_SIZE_NAME }}
      cloud_provider: ${{ vars.CLOUD_PROVIDER }}
      atlas_region: ${{ vars.ATLAS_REGION }}
      mongodb_version: ${{vars.MONGODB_VERSION}}
      ip_address: ${{vars.IP_ADDRESS}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with: 
        tf_actions_version: 0.12.13
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: '.'
        tf_actions_comment: true
        args: '-var="subnetA=${{vars.SUBNETA}}" -var="subnetB=${{vars.SUBNETB}} -var="subnetC=${{vars.SUBNETC}}"'
        
    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   #run: terraform plan -input=false
    #   with:
    #     run: terraform plan -input=false
    #     args: '-var="subnetA=${{vars.SUBNETA}}" -var="subnetB=${{vars.SUBNETB}} -var="subnetC=${{vars.SUBNETC}}"'

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
      #if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      #run: terraform apply -auto-approve -input=false
